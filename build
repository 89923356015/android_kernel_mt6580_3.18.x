#!/usr/bin/env bash
#
# Copyright (C) 2018 Yuvraj Saxena (frap130)
#
# Kernel Compilation Script

# For Colors
cyan='\033[0;36m'
green='\033[0;32m'
blue='\033[0;34m'
orange='\033[0;33m'
red='\033[0;31m'
purple='\033[0;35m'
yellow='\033[0;33m'
nocol='\033[0m'

clear
echo -e "${purple}"
echo
echo -e "${green}================================================================================================"
echo
echo -e "${orange}"
echo -e "${orange}                       88   eeee  eeeeee"
echo -e "${orange}eeee eeeee  eeeee eeeee 8      8  8    8"
echo -e "${orange}8    8   8  8   8 8   8 8      8  8    8"
echo -e "${orange}8eee 8eee8e 8eee8 8eee8 8   eee8  8    8"
echo -e "${orange}88   88   8 88  8 88   8888    88 8    8"
echo -e "${orange}88   88   8 88  8 88   8888 eee88 8eeee8"
echo
echo -e "${purple}================================================================================================"
echo
sleep 4
clear

function BINFO() {
export KBUILD_BUILD_USER=Yuvraj
export KBUILD_BUILD_HOST=âˆ†Thestral
}

function DEVICE() {
BLDR="Yuvraj Saxena (frap130)"
DEVICE="Dexp Ixion P350"
echo -e "${cyan}Kernel For $DEVICE"
echo -e "${green}                      -by $BLDR"
}

function TOOLCHAIN() {
if [[ ! -d linaro ]];
then
    echo -e "${red}####################################"
    echo -e "${cyan}#       TOOLCHAIN NOT FOUND!       #"
    echo -e "${yellow}####################################"
    echo -e "${green}#       CLONING TOOLCHAIN          #"
    echo -e "####################################"
git clone -q https://github.com/frap130/linaro-6.3.1 linaro
export ARCH=arm CROSS_COMPILE=$PWD/linaro/bin/arm-linux-gnueabihf-
else
export ARCH=arm CROSS_COMPILE=$PWD/linaro/bin/arm-linux-gnueabihf-
fi
}

function BUILD() {
mkdir -p out
echo -e "${purple} READING DEFCONFIG..."
make P350_defconfig O=out/ &>> defconfig.log
echo -e "${yellow} BUILDING KERNEL..."
make -j4 O=out/ &>> Kernel.log
KIMAGE=out/arch/arm/boot/zImage-dtb
}

function transfer() {
    file="$1"
    zipname=$(echo "${file}" | awk -F '/' '{print $NF}')
    destination="$2"
    url=$(curl -# -T "${file}" https://transfer.sh/${destination})
    printf '\n'
    echo -e "Download $zipname at $url"
}

function format_time() {
    MINS=$(((${1}-${2})/60))
    SECS=$(((${1}-${2})%60))
    if [[ ${MINS} -ge 60 ]]; then
        HOURS=$((${MINS}/60))
        MINS=$((${MINS}%60))
    fi

    if [[ ${HOURS} -eq 1 ]]; then
        TIME_STRING+="1 HOUR, "
    elif [[ ${HOURS} -ge 2 ]]; then
        TIME_STRING+="${HOURS} HOURS, "
    fi

    if [[ ${MINS} -eq 1 ]]; then
        TIME_STRING+="1 MINUTE"
    else
        TIME_STRING+="${MINS} MINUTES"
    fi

    if [[ ${SECS} -eq 1 && -n ${HOURS} ]]; then
        TIME_STRING+=", AND 1 SECOND"
    elif [[ ${SECS} -eq 1 && -z ${HOURS} ]]; then
        TIME_STRING+=" AND 1 SECOND"
    elif [[ ${SECS} -ne 1 && -n ${HOURS} ]]; then
        TIME_STRING+=", AND ${SECS} SECONDS"
    elif [[ ${SECS} -ne 1 && -z ${HOURS} ]]; then
        TIME_STRING+=" AND ${SECS} SECONDS"
    fi

    echo ${TIME_STRING}
}

function CHECK() {
if [[ ! -e out/arch/arm/boot/zImage-dtb ]];
then
    echo -e "${red}############################"
    echo -e "${red}#        BUILD ERROR!      #"
    echo -e "${red}############################"
    echo -e "${cyan}#       Uploading Logs     #"
    echo -e "${red}############################"
    transfer Kernel.log
else
echo -e "${green} #####################################"
echo -e "${green} #                                   #"
echo -e "${green} #  SUCCESSFULLY BUILDED KERNEL      #"
echo -e "${green} #        -BY FRAP130                #"
echo -e "${green} #                                   #"
echo -e "${green} #####################################"
echo -e "${orange} #  uploading Kernel And Logs        "
echo -e "${orange} #####################################"
mv ${KIMAGE} Kernel
zip -r Kernel.zip Kernel
transfer Kernel.zip
fi
}

function CLEAN() {
echo -e "${green}#        Cleaning Tree!      #"
make clean O=out/ &>> clean.log
make mrproper O=out/ &>> mrproper.log
}

function HELP() {
	echo -e "${blue}usage: $0 [options]}"
	echo -e ""
	echo -e "${yellow}options:"
	echo -e "${yellow}  -h, --help     display this help message"
	echo -e "${yellow}  -c, --clean    wipe the tree before building"
	echo -e "${yellow}  -b, --build   build Kernel"
}

function PARAMS() {
params="${*}"
while [[ ${#} -ge 1 ]]; do
	case ${1} in
		"-h"|"--help")
			Help=y
			;;
		"-c"|"--clean")
			CLEAN_TREE=y
			;;
		"-b"|"--build")
			BUILD_KERNEL=y
			;;
		*)
			echo -e "${red}warning: not enough parameters specified"
			;;
		esac
		shift
done
}

PARAMS "${@}"

if [[ "${BUILD_KERNEL}" = 'y' ]]; then
clear
START=$(date +"%s")
DEVICE
TOOLCHAIN
BINFO
BUILD
CHECK
END=$(date +%s)
TIME_STRING="$(format_time "${START}" "${END}")"
echo -e "${green}Completed In: ${TIME_STRING}"
read junk
fi

if [[ "${CLEAN_TREE}" = 'y' ]]; then
clear
CLEAN
read junk
fi

if [[ "${Help}" = 'y' ]]; then
HELP
read junk
fi
